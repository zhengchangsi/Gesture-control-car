C51 COMPILER V9.01   GESTURE_CONTROL                                                       04/21/2015 20:38:21 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE GESTURE_CONTROL
OBJECT MODULE PLACED IN Gesture control.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE Gesture control.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include  <REG52.H>     
   2          #include  <depend.h>
   3          #include  <math.h>   
   4          #include  <stdio.h>     
   5          #include  <INTRINS.H>
   6          #define uint unsigned int
   7          #define uchar unsigned char      
   8          #define SlaveAddress   0xA6       
   9                                       
  10          #define JudgeP_M  0x8000  
  11          #define Left_cmp  0x006e   
  12          #define Right_cmp 0x006e
  13          #define Go_cmp    0x006e
  14          #define Back_cmp  0x006e
  15          #define Go    0xaa                
  16          #define Back  0x55
  17          #define Left  0xa0
  18          #define Right 0x0a
  19          #define Stop  0x00
  20          
  21          sbit      SCL=P1^0;      
  22          sbit      SDA=P1^1;               
  23          Byte BUF[8];                        
  24          Byte Sbuf[8]; 
  25          uint Wbuf[2];           
  26           
  27          void Init_ADXL345(void);
  28          void  Multiple_Read_ADXL345();
  29          void Delay5us();
  30          void Delay5ms();
  31          void Delay20ms();
  32          void ADXL345_Start();
  33          void ADXL345_Stop();
  34          void ADXL345_SendACK(bit ack);
  35          bit  ADXL345_RecvACK();
  36          void ADXL345_SendByte(Byte dat);
  37          Byte ADXL345_RecvByte();
  38          void ADXL345_ReadPage();
  39          void ADXL345_WritePage();
  40          void send();
  41          void uart();
  42          void Data_Convert();
  43          void Data_Process();
  44          void direction_judge();
  45          
  46          
  47          
  48          void main()
  49          { 
  50   1              void Delay20ms();                                                          
  51   1              uart(); 
  52   1              Init_ADXL345();                 
  53   1              while(1)                         
  54   1              { 
  55   2                      Multiple_Read_ADXL345();        
C51 COMPILER V9.01   GESTURE_CONTROL                                                       04/21/2015 20:38:21 PAGE 2   

  56   2                      Data_Convert();
  57   2              Data_Process();
  58   2                      direction_judge();
  59   2                      Delay20ms();                       
  60   2              }
  61   1      }
  62          
  63          /*******************************
  64          延时函数
  65          *****************************/
  66          void Delay20ms()        
  67          {
  68   1              unsigned char i, j, k;
  69   1              _nop_();
  70   1              _nop_();
  71   1              i = 1;
  72   1              j = 216;
  73   1              k = 35;
  74   1              do
  75   1              {
  76   2                      do
  77   2                      {
  78   3                              while (--k);
  79   3                      } while (--j);
  80   2              } while (--i);
  81   1      }
  82                                                                                          
  83          
  84          void Delay5us()
  85          {
  86   1          _nop_();_nop_();_nop_();_nop_();
  87   1          _nop_();_nop_();_nop_();_nop_();
  88   1              _nop_();_nop_();_nop_();_nop_();
  89   1      }
  90          
  91          
  92          void Delay5ms()
  93          {
  94   1          uint n = 560;
  95   1      
  96   1          while (n--);
  97   1      }
  98          /**************************************
  99          起始信号
 100          **************************************/
 101          void ADXL345_Start()
 102          {
 103   1          SDA = 1;                   
 104   1          SCL = 1;                   
 105   1          Delay5us();                
 106   1          SDA = 0;                    
 107   1          Delay5us();                 
 108   1          SCL = 0;                    
 109   1      }
 110          /**************************************
 111          停止信号
 112          **************************************/
 113          void ADXL345_Stop()
 114          {
 115   1          SDA = 0;                   
 116   1          SCL = 1;                   
 117   1          Delay5us();                 
C51 COMPILER V9.01   GESTURE_CONTROL                                                       04/21/2015 20:38:21 PAGE 3   

 118   1          SDA = 1;                    
 119   1          Delay5us();                 
 120   1      }
 121          /**************************************
 122          发送应答信号
 123          **************************************/
 124          void ADXL345_SendACK(bit ack)
 125          {
 126   1          SDA = ack;                
 127   1          SCL = 1;                    
 128   1          Delay5us();             
 129   1          SCL = 0;                   
 130   1          Delay5us();                
 131   1      }
 132          /**************************************
 133          接收应答信号
 134          **************************************/
 135          bit ADXL345_RecvACK()
 136          {
 137   1          SCL = 1;                    
 138   1          Delay5us();               
 139   1          CY = SDA;                   
 140   1          SCL = 0;                   
 141   1          Delay5us();                
 142   1          return CY;
 143   1      }
 144          /**************************************
 145          向IIC总线发送一个字节数据
 146          **************************************/
 147          void ADXL345_SendByte(Byte dat)
 148          {
 149   1          Byte i;
 150   1      
 151   1          for (i=0; i<8; i++)         
 152   1          {
 153   2              dat <<= 1;              
 154   2              SDA = CY;               
 155   2              SCL = 1;               
 156   2              Delay5us();            
 157   2              SCL = 0;                
 158   2              Delay5us();             
 159   2          }
 160   1          ADXL345_RecvACK();
 161   1      }
 162          /**************************************
 163          从IIC总线接收一个字节数据
 164          **************************************/
 165          Byte ADXL345_RecvByte()
 166          {
 167   1          Byte i;
 168   1          Byte dat = 0;
 169   1          SDA = 1;                  
 170   1          for (i=0; i<8; i++)         
 171   1          {
 172   2              dat <<= 1;
 173   2              SCL = 1;               
 174   2              Delay5us();             
 175   2              dat |= SDA;                            
 176   2              SCL = 0;              
 177   2              Delay5us();            
 178   2          }
 179   1          return dat;
C51 COMPILER V9.01   GESTURE_CONTROL                                                       04/21/2015 20:38:21 PAGE 4   

 180   1      }
 181          /**************************************
 182          单字节写入
 183          **************************************/
 184          void Single_Write_ADXL345(Byte REG_Address,Byte REG_data)
 185          {
 186   1          ADXL345_Start();                 
 187   1          ADXL345_SendByte(SlaveAddress);  
 188   1          ADXL345_SendByte(REG_Address);   
 189   1          ADXL345_SendByte(REG_data);     
 190   1          ADXL345_Stop();                   
 191   1      }
 192          /**************************************
 193          单字节读取
 194          **************************************/
 195          Byte Single_Read_ADXL345(Byte REG_Address)
 196          {  Byte REG_data;
 197   1          ADXL345_Start();                          
 198   1          ADXL345_SendByte(SlaveAddress);          
 199   1          ADXL345_SendByte(REG_Address);              
 200   1          ADXL345_Start();                         
 201   1          ADXL345_SendByte(SlaveAddress+1);        
 202   1          REG_data=ADXL345_RecvByte();             
 203   1              ADXL345_SendACK(1);   
 204   1              ADXL345_Stop();                          
 205   1          return REG_data; 
 206   1      }
 207          /**************************************
 208          连续读出ADXL345内部加速度数据
 209          **************************************/
 210          void Multiple_read_ADXL345(void)
 211          {   Byte i;
 212   1          ADXL345_Start();                          
 213   1          ADXL345_SendByte(SlaveAddress);           
 214   1          ADXL345_SendByte(0x32);                     
 215   1          ADXL345_Start();                         
 216   1          ADXL345_SendByte(SlaveAddress+1);         
 217   1               for (i=0; i<6; i++)                      
 218   1          {
 219   2              BUF[i] = ADXL345_RecvByte();         
 220   2              if (i == 5)
 221   2              {
 222   3                 ADXL345_SendACK(1);               
 223   3              }
 224   2              else
 225   2              {
 226   3                ADXL345_SendACK(0);               
 227   3             }
 228   2         }
 229   1          ADXL345_Stop();                          
 230   1          Delay5ms();
 231   1      }
 232          /**************************************
 233          初始化ADXL345
 234          **************************************/
 235          void Init_ADXL345()
 236          {
 237   1         Single_Write_ADXL345(0x31,0x0B);   
 238   1         Single_Write_ADXL345(0x2C,0x08);   
 239   1         Single_Write_ADXL345(0x2D,0x08);  
 240   1         Single_Write_ADXL345(0x2E,0x80);   
 241   1         Single_Write_ADXL345(0x1E,0x00);   
C51 COMPILER V9.01   GESTURE_CONTROL                                                       04/21/2015 20:38:21 PAGE 5   

 242   1         Single_Write_ADXL345(0x1F,0x00);  
 243   1         Single_Write_ADXL345(0x20,0x05);  
 244   1      }
 245          void uart()
 246          {
 247   1              SCON=0x50;
 248   1              TMOD=0x20;
 249   1              PCON=0x00;
 250   1              TH1=0xfd;
 251   1              TL1=0xfd;
 252   1              IE=0x90;
 253   1              TR1=1;
 254   1      }
 255          
 256          void send(unsigned char ch) 
 257          {
 258   1              ES=0; 
 259   1              SBUF=ch; 
 260   1              while (TI==0); 
 261   1              TI=0 ;
 262   1              ES=1; 
 263   1      }
 264          void Data_Convert()                                     
 265          {
 266   1              Wbuf[0]=BUF[1]<<8|BUF[0];
 267   1              Wbuf[1]=BUF[3]<<8|BUF[2];
 268   1              Wbuf[2]=BUF[5]<<8|BUF[4];
 269   1      } 
 270          void Data_Process()
 271          {
 272   1              uint i=0;
 273   1              i=Wbuf[0]&JudgeP_M;        
 274   1              if(i==0x8000)             
 275   1              {
 276   2                      Wbuf[0]=~Wbuf[0]+1;
 277   2                      Wbuf[0]=Wbuf[0]&0x7fff;
 278   2                      if(Wbuf[0]>Left_cmp)
 279   2                      {
 280   3                              Sbuf[0]=Left;
 281   3                      }
 282   2                      else
 283   2                      {
 284   3                              Sbuf[0]=Stop;
 285   3                      }
 286   2              }
 287   1              else                                      
 288   1              {
 289   2                      if(Wbuf[0]>Right_cmp)
 290   2                      {
 291   3                        Sbuf[0]=Right;
 292   3                      }
 293   2                      else
 294   2                      {
 295   3                         Sbuf[0]=Stop;
 296   3                      }
 297   2              }
 298   1              i=Wbuf[1]&JudgeP_M;               
 299   1              if(i==0x8000)              
 300   1              {
 301   2                      Wbuf[1]=~Wbuf[1]+1;
 302   2                      Wbuf[1]=Wbuf[1]&0x7fff;
 303   2                      if(Wbuf[1]>Back_cmp)
C51 COMPILER V9.01   GESTURE_CONTROL                                                       04/21/2015 20:38:21 PAGE 6   

 304   2                      {
 305   3                              Sbuf[1]=Back;
 306   3                      }
 307   2                      else
 308   2                      {
 309   3                              Sbuf[1]=Stop;
 310   3                      }
 311   2              }
 312   1              else                                     
 313   1              {
 314   2                      if(Wbuf[1]>Go_cmp)
 315   2                      {
 316   3                              Sbuf[1]=Go;
 317   3                      }
 318   2                      else
 319   2                      {
 320   3                              Sbuf[1]=Stop;
 321   3                      }
 322   2              }
 323   1      }
 324          
 325          void direction_judge()
 326          {
 327   1      
 328   1              if(Sbuf[0]==Left|Sbuf[0]==Right)
 329   1              {
 330   2                      send(Sbuf[0]);
 331   2              }
 332   1              else
 333   1              {
 334   2                      send(Sbuf[1]);
 335   2              }
 336   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    543    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
